#!/usr/bin/perl

use lib '/usr/local/cpanel';

use Cpanel::SafeRun::Errors ();
use LWP::Simple;
use Term::ANSIColor qw(:constants);

chomp( my %host   = get_system() );
chomp( my %apache = get_apache() );
chomp( my $current_tree =
      get_current_tree( $host{'tree'}, $host{'hardware'} ) );
chomp( my %thirdparty = get_third_party() );

print RED "\nHostname: ", RESET;
if ( $host{'hostname'} !~ /is not a FQDN/m ) {
    print BLUE ON_WHITE " $host{'hostname'}", RESET "\n";
}

if ( $host{'hostname'} =~ /is not a FQDN/m ) {
    print BOLD RED ON_BLUE " $host{'hostname'}", RESET "\n";
}

if (   $host{'cpanelversion'} =~ $current_tree
    && $system{'manual_update'} == '0'
    && $system{'never_update'} == '0' )
{
    print RED "cPanel Version: ", RESET;
    print BLUE ON_WHITE " $host{'cpanelversion'}",  RESET;
    print BLUE ON_WHITE " ( no update available )", RESET "\n";
}
elsif ($host{'cpanelversion'} =~ $current_tree
    && $system{'manual_update'} == '1' )
{
    print RED "cPanel Version: ", RESET;
    print BLUE ON_WHITE " $host{'cpanelversion'}", RESET;
    print BOLD BLACK ON_RED " MANUAL UPDATE",          RESET;
    print BOLD RED ON_BLUE " ( no update available )", RESET "\n";
}
elsif ($host{'cpanelversion'} =~ $current_tree
    && $system{'never_update'} == '1' )
{
    print RED "cPanel Version: ", RESET;
    print BLUE ON_WHITE " $host{'cpanelversion'}", RESET;
    print BOLD BLACK ON_RED " NEVER UPDATE",           RESET;
    print BOLD RED ON_BLUE " ( no update available )", RESET "\n";
}
elsif ($host{'cpanelversion'} !~ $current_tree
    && $system{'never_update'} == '1' )
{
    print RED "cPanel Version: ", RESET;
    print BLUE ON_WHITE " $host{'cpanelversion'}", RESET;
    print BOLD BLACK ON_RED " NEVER UPDATE",       RESET;
    print BOLD RED ON_BLUE " UPDATE AVAILABLE ->", RESET;
    print BOLD RED ON_BLUE "$current_tree",        RESET "\n";
}
elsif ($host{'cpanelversion'} !~ $current_tree
    && $system{'manual_update'} == '1' )
{
    print RED "cPanel Version: ", RESET;
    print BLUE ON_WHITE " $host{'cpanelversion'}", RESET;
    print BOLD BLACK ON_RED " MANUAL UPDATE",      RESET;
    print BOLD RED ON_BLUE " UPDATE AVAILABLE ->", RESET;
    print BOLD RED ON_BLUE "$current_tree",        RESET "\n";
}
elsif ($host{'cpanelversion'} !~ $current_tree
    && $system{'manual_update'} == '0'
    && $system{'never_update'} == '0' )
{
    print RED "cPanel Version: ", RESET;
    print BLUE ON_WHITE " $host{'cpanelversion'}", RESET;
    print BOLD RED ON_BLUE " UPDATE AVAILABLE ->", RESET;
    print BOLD RED ON_BLUE "$current_tree",        RESET "\n";
}
print RED "Kernel/CPU: ", RESET;
print BLUE ON_WHITE
" $host{'kernel'} $host{'hardware'} $host{'environment'} $host{'cpuinfo'} /w ";
if ( $host{'numcores'} == 1 ) {
    print BLUE ON_WHITE "$host{'numcores'} core @ $host{'mhz'} Mhz"
      . RESET "\n";
}
if ( $host{'numcores'} > 1 ) {
    print BLUE ON_WHITE "$host{'numcores'} cores @ $host{'mhz'} Mhz"
      . RESET "\n";
}
print RED "Uptime: ", RESET;
print BLUE ON_WHITE " $host{'uptime'}", RESET "\n";

# determine if there is an IP mismatch between internal and external networking configurations
if ( $system{'match'} == 0 ) {
    print RED "Network Mismatch: ", RESET;
    print RED BOLD ON_BLUE,
"The internal IP $system{'internal_ip'} does not match external IP $system{'external_ip'}",
      RESET "\n";
}

# determine if perl is correctly symlinked or running 2 binaries
if ( $system{'perl'} !~ /valid/m ) {
    print RED "Perl Mismatch: ", RESET;
    print RED BOLD ON_BLUE "$system{'perl'}", RESET "\n";
}

# display Apache information
print RED "Apache Version: ", RESET;
print BLUE ON_WHITE " $apache{'version'}", RESET "\n";
print RED "Apache Uptime: ", RESET;
if ( $apache{'uptime'} =~ /Apache is not accepting connections/m
    && !$thirdparty{'nginx'} )
{
    print RED BOLD ON_BLUE " $apache{'uptime'} ", RESET "\n";
}
elsif ($apache{'uptime'} =~ /Apache is not accepting connections/m
    && $thirdparty{'nginx'} )
{
    print RED BOLD ON_BLUE " $apache{'uptime'} !!! NGINX may be the cause",
      RESET "\n";
}
else {
    print BLUE ON_WHITE
      " $apache{'uptime'} /w $apache{'generations'} generations", RESET "\n";
}
print RED "Apache Built: ", RESET;
print BLUE ON_WHITE " $apache{'built'} via $apache{'ea3buildversion'}", RESET "\n";
print RED "PHP default: ", RESET;
print BLUE ON_WHITE
" $apache{'phpdefaultversion'} $apache{'phpdefaulthandler'} $apache{'suexec'}",
  RESET "\n";
print RED "PHP secondary: ", RESET;

if ( $apache{'phpsecondaryversion'} =~ /is not compiled/m ) {
    print BLUE ON_WHITE
      " $apache{'phpsecondaryversion'} $apache{'phpsecondaryhandler'}",
      RESET "\n";
}
else {
    print BLUE ON_WHITE
" $apache{'phpsecondaryversion'} $apache{'phpsecondaryhandler'} $apache{'suexec'}",
      RESET "\n";
}

# Conditionally print hooks as they are found

if ($system{'hooks'}){
   print RED "Hooks Found: ", RESET;
   print RED BOLD ON_BLUE "$system{'hooks'}", RESET "\n";	
}

# Notify if custom pkgacct directories are in place.  These typically signify that there is a modified pkgacct deployed
#    on the machine.

if ($system{'pkgacct'}){
   print RED "Custom Pkgacct: ", RESET;
   print RED BOLD ON_BLUE "$system{'pkgacct'}", RESET "\n";	
}

# Conditionally print 3rdParty row if 3rdparty services have been detected.
if (%thirdparty) {
    while ( ( my $key, my $value ) = each(%thirdparty) ) {
        if ( $value !~ /not installed/m && $value =~ /\w+/m ) {
            chomp( our $uckey = uc($key) );
            print RED "$uckey: ", RESET;
            print BLUE BOLD ON_BLUE "$value", RESET "\n";
        }
    }
}

print "\n";

sub check_perl {
    my %perl = get_perl_attributes();

    if ( $perl{'usrbin'} =~ 'link' && $perl{'usrlocalbin'} =~ 'binary' ) {
        $perl{'status'} = 'valid';
    }
    elsif ( $perl{'usrbin'} =~ 'binary' && $perl{'usrlocalbin'} =~ 'link' ) {
        $perl{'status'} = 'valid';
    }
    elsif ( $perl{'usrbin'} =~ 'link' && $perl{'usrlocalbin'} =~ 'link' ) {
        $perl{'status'} = '/usr/bin/perl and /usr/local/bin/perl are symlinks';
    }
    elsif ( $perl{'usrbin'} =~ 'binary' && $perl{'usrlocalbin'} =~ 'binary' ) {
        $perl{'status'} =
          '/usr/bin/perl and /usr/local/bin/perl are both executables';
    }
    elsif ( $perl{'usrbin'} =~ '' && $perl{'usrlocalbin'} =~ 'binary' ) {
        $perl{'status'} =
          '/usr/local/bin/perl exists but there is no symlink from /usr/bin';
    }
    elsif ( $perl{'usrbin'} =~ 'binary' && $perl{'usrlocalbin'} =~ '' ) {
        $perl{'status'} =
          '/usr/bin/perl exists but there is no symlink from /usr/localbin';
    }

    return $perl{'status'};
}

sub convert_hardware {
    my $hardware_raw = shift;
    my $hardware;

    if ( $hardware_raw =~ /i386/i ) {
        $hardware = "Linux";
    }
    if ( $hardware_raw =~ /x86_64/i ) {
        $hardware = "Linux x86-64";
    }

    return $hardware;
}

sub convert_tree {
    my $tree_raw = shift;
    my $tree;

    if ( $tree_raw =~ /stable/i ) {
        $tree = "STABLE";
    }
    if ( $tree_raw =~ /release/i ) {
        $tree = "RELEASE";
    }
    if ( $tree_raw =~ /daily/i ) {
        $tree = "RELEASE";
    }
    if ( $tree_raw =~ /current/i ) {
        $tree = "CURRENT";
    }
    if ( $tree_raw =~ /edge/i ) {
        $tree = "EDGE";
    }
    if ( $tree_raw =~ /beta/i ) {
        $tree = "BETA";
    }
    if ( $tree_raw =~ /nightly/i ) {
        $tree = "NIGHTLY";
    }
    if ( $tree_raw =~ /dnsonly/i && !$tree_raw !~ /beta/i ) {
        $tree = "DNSONLY";
    }
    if ( $tree_raw =~ /dnsonly-beta/i ) {
        $tree = "DNSONLY-BETA";
    }

    return $tree;
}

sub detect_assp {
    my $assp;
    chomp( my $assppid = Cpanel::SafeRun::Errors::saferunnoerror( "lsof", "-n" ) );

    if ( $assppid =~ /^\d+$/m ) {
        $assp = " installed and running with PID $assppid";
    }
    else {
        $assp = " not installed";
    }

    return $assp;
}

sub get_apache {
    my $phpversion;
    my $php5version;
    my $php4version;
    my $php4handler;
    my $php5handler;
    my $phpdefaultversion;
    my $phpsecondaryversion;
    my $phpdefaulthandler;
    my $phpsecondaryhandler;
    my $suexec;
    my @php4;
    my @php5;
    my $apachestatus = get("http://localhost/whm-server-status");
    my @apachestatus = split( /\n/, $apachestatus );
    my $apacheuptime;
    my $apachegeneration;

    if ( !$apachestatus ) {
        $apacheuptime = "Apache is not accepting connections";
    }

    if ($apachestatus) {
        foreach my $line (@apachestatus) {
            if ( $line =~ /Server uptime/m ) {
                $line =~ s/^<dt>|<\/dt>|Server uptime:  //g;
                $apacheuptime = $line;
            }
            if ( $line =~ /Parent Server Generation: /m ) {
                $line =~ s/^<dt>|<\/dt>|Parent Server Generation: //g;
                $apachegeneration = $line;
            }
        }
    }

    open( my $phpconf_f, '<', '/usr/local/apache/conf/php.conf.yaml' );
    foreach my $line ( readline $phpconf_f ) {
        if ( $line =~ /^phpversion: \d+/m ) {
            $phpversion = $line;
            $phpversion =~ s/^phpversion: //;
        }
        if ( $line =~ /^php4: /m ) {
            $line =~ s/^php4: //;
            $php4handler = $line;
        }
        if ( $line =~ /^php5: /m ) {
            $line =~ s/^php5: //;
            $php5handler = $line;
        }
        if ( $line =~ /^suexec: 1/m ) {
            $suexec = "/w suexec";
        }
        if ( $line =~ /^suexec: 0/m ) {
            $suexec = "";
        }
    }
    close $phpconf_f;

    if ( $phpversion =~ /^5$/m ) {
        if ( -f "/usr/bin/php" ) {
            my @php5 = get_php5();
            foreach my $line (@php5) {
                if ( $line =~ /^PHP/m ) {
                    $php5version       = $line;
                    $phpdefaultversion = $php5version;
                    $phpdefaulthandler = $php5handler;
                }
            }
        }
        else {
            $phpdefaultversion = "PHP5 is not compiled.";
        }
        if ( -f "/usr/local/php4/bin/php" && -x "/usr/local/php4/bin/php" ) {
            @php4 = get_php4();
            foreach my $line (@php4) {
                if ( $line =~ /^PHP/m ) {
                    $php4version         = $line;
                    $phpsecondaryversion = $php4version;
                    $phpsecondaryhandler = $php4handler;
                }
            }
        }
        else {
            $phpsecondaryversion = "PHP4 is not compiled.";
        }
    }

    if ( $phpversion =~ /^4$/m ) {
        if ( -f "/usr/bin/php" ) {
            @php5 = get_php5();
            foreach my $line (@php5) {
                if ( $line =~ /^PHP/m ) {
                    $php5version         = $line;
                    $phpsecondaryversion = $php5version;
                    $phpsecondaryhandler = $php5handler;
                }
            }
        }
        else {
            $phpsecondaryversion = "PHP5 is not compiled.";
        }
        if ( -f "/usr/local/php4/bin/php" && -x "/usr/local/php4/bin/php" ) {
            my @php4 = get_php4();
            foreach my $line (@php4) {
                if ( $line =~ /^PHP/m ) {
                    $php4version       = $line;
                    $phpdefaultversion = $php4version;
                    $phpdefaulthandler = $php4handler;
                }
            }
        }
        else {
            $phpdefaultversion = "PHP4 is not compiled.";
        }
    }

# After discussion we still want to pull this information via backticks being that
#     the backticks allow direct communication between this script and the apachectl binary itself

    %apachectl = (
        "version"             => get_apache_version(),
        "built"               => get_apache_built(),
        "ea3buildversion"     => get_apache_ea3_version(),
        "generations"         => $apachegeneration,
        "phpversion"          => $phpversion,
        "php5version"         => $php5version,
        "php4version"         => $php4version,
        "phpdefaultversion"   => $phpdefaultversion,
        "phpsecondaryversion" => $phpsecondaryversion,
        "phpdefaulthandler"   => $phpdefaulthandler,
        "phpsecondaryhandler" => $phpsecondaryhandler,
        "suexec"              => $suexec,
        "uptime"              => $apacheuptime
    );

    return %apachectl;
}

sub get_apache_built {
    my $apachectl = '/usr/local/apache/bin/apachectl'
      if ( -x '/usr/local/apache/bin/apachectl' );
    my $proc = Cpanel::SafeRun::Errors::saferunnoerror( $apachectl, "-v" );
    my @proc = split( /\n/, $proc );
    foreach my $line (@proc) {
        if ( $line =~ /Server\sbuilt:/m ) {
            $line =~ s/Server\sbuilt:\s+//;
            return $line;
        }
    }
}

sub get_apache_ea3_version {
    my $apachectl = '/usr/local/apache/bin/apachectl'
      if ( -x '/usr/local/apache/bin/apachectl' );
    my $proc = Cpanel::SafeRun::Errors::saferunnoerror( $apachectl, "-v" );
    my @proc = split( /\n/, $proc );
    foreach my $line (@proc) {
        if ( $line =~ /Cpanel::Easy::Apache/m ) {
            $line =~ s/Cpanel::Easy::Apache //;
            return $line;
        }
    }
}

sub get_apache_version {
    my $apachectl = '/usr/local/apache/bin/apachectl'
      if ( -x '/usr/local/apache/bin/apachectl' );
    my $proc = Cpanel::SafeRun::Errors::saferunnoerror( $apachectl, "-v" );
    my @proc = split( /\n/, $proc );
    foreach my $line (@proc) {
        if ( $line =~ /Server\sversion:/m ) {
            $line =~ s/Server\sversion:\s//;
            return $line;
        }
    }
}

sub get_apf {
    my %apf;
    if ( -x '/usr/local/sbin/apf' ) {
	    $apf{'path'} = '/usr/local/sbin/apf';
	    my $chkconfig = Cpanel::SafeRun::Errors::saferunnoerror( 'chkconfig', '--list', 'apf');
	    if ( $chkconfig && -x $apf{'path'} ) {
		    if ( $chkconfig =~ /\s+3:on\s+/m ) {
			    return " APF is installed.  Run `$apf{'path'} -t` to see if it's running.";
			}
		}
    }
}

sub get_cpanelversion {
    open my $cpanelversion_f, '<', '/usr/local/cpanel/version'
      or die "This is not a cPanel system.\n";
    my $cpanelversion = readline($cpanelversion_f);
    close $cpanelversion_f;
    return $cpanelversion;
}

sub get_cpuinfo {
    my %cpuinfo;
    open( my $cpuinfo_f, '<', '/proc/cpuinfo' );

    foreach my $line ( readline $cpuinfo_f ) {
        if ( $line =~ /^model name/m ) {
            $line =~ s/^model name\s+:\s+//;
            $line =~ s/\(R\)//g;
            $line =~ s/\(tm\)//g;
            $line =~ s/\s{2,}/ /;
            $line =~ s/ \@/\@/;
            $cpuinfo{'model'} = $line;
            $cpuinfo{'numcores'}++;
        }
        if ( $line =~ /^cpu MHz/m ) {
            $line =~ s/^cpu MHz\s+:\s+//;
            $cpuinfo{'mhz'} = $line;
        }
    }
    close $cpuinfo_f;
    return %cpuinfo;
}

sub get_current_tree {
    my $tree_raw     = shift;
    my $hardware_raw = shift;
    my $updatefile   = get("http://httpupdate.cpanel.net");
    my $result;
    my @updatefile = split( /\n/, $updatefile );
    my @tree;
    my $neverupdate  = '0';
    my $manualupdate = '0';

    my $hardware = convert_hardware($hardware_raw);
    my $tree     = convert_tree($tree_raw);

    my $current_tree = get_cpanelversion();

    if ( $tree && $tree =~ /never/i ) {
        $neverupdate = '1';
    }
    if ( $tree && $tree =~ /manual/i ) {
        $manualupdate = '1';
    }

    foreach my $line (@updatefile) {
        if (   $line !~ /mblock/m
            && $line =~ /\d{1,2}\.\d{1,2}\.\d{1,2}-$tree\_\d{1,6}/m )
        {
            $line =~ s/^\s+//;
            $line =~ s/<br \/>//;
            my @line = split( /\(/, $line );
            push( @tree, $line[0] );
        }
    }

    if ( $hardware =~ /Linux/m && $hardware !~ /x86-64/ ) {
        $result = $tree[0];
    }
    if ( $hardware =~ /Linux/m && $hardware =~ /x86-64/ ) {
        $result = $tree[1];
    }
    if ( $hardware =~ /FreeBSD/m && $hardware !~ /amd64/ ) {
        $result = $tree[2];
    }
    if ( $hardware =~ /FreeBSD/m && $hardware =~ /amd64/ ) {
        $result = $tree[3];
    }
    if (   $hardware =~ /Linux/m
        && $hardware !~ /x86-64/
        && $neverupdate =~ /^1$/m )
    {
        $result = $tree[0];
    }
    if ( $hardware =~ /Linux/m && $hardware =~ /x86-64/ ) {
        $result = $tree[1];
    }
    if ( $hardware =~ /FreeBSD/m && $hardware !~ /amd64/ ) {
        $result = $tree[2];
    }
    if ( $hardware =~ /FreeBSD/m && $hardware =~ /amd64/ ) {
        $result = $tree[3];
    }

    return $result;
}

sub get_csf {
    my %csf;
    chomp( $csf{'path'} = Cpanel::SafeRun::Errors::saferunnoerror( "which", "csf" ) );
    $csf{'data'} = Cpanel::SafeRun::Errors::saferunnoerror( $csf{'path'}, "-l" );
    if (   $csf{'path'}
        && $csf{'data'}
        && $csf{'data'} !~ /\shave\sbeen\sdisabled/m )
    {
        $csf{'status'} = ' enabled';
    }
    if (   $csf{'path'}
        && $csf{'data'}
        && $csf{'data'} =~ /\shave\sbeen\sdisabled/m )
    {
        $csf{'status'} = 'installed but disabled';
    }
    return $csf{'status'};
}

sub get_environment {
    open my $envtype_f, '<', '/var/cpanel/envtype';
    my $envtype = readline($envtype_f);
    close $envtype_f;
    return $envtype;
}

sub get_hooks {
	my @hooks;
    my $scriptsdir = '/scripts' if ( -d '/scripts');
    my $customeventhandler = '1' if ( -f '/usr/local/cpanel/Cpanel/CustomEventHandler.pm' );
    my $hooklist;

    if ( $scriptsdir ) {
	    opendir ( SCRIPTS, $scriptsdir );
	    while( our $filename = readdir(SCRIPTS)) {
		    if ( $filename =~ /^pre|^post/m ) {
			    # Drop known scripts with same naming convention
			    if ( $filename !~ /postsuexecinstall/i ) {
			        push( @hooks, $filename );
			    }
			}
		}
	} else {
	    print "\n/scripts does not exist!  Please manually resync from http://httpupdate.cpanel.net/cpanelsync/ !!!\n\n";	
	}
    closedir(SCRIPTS);

    if ( $customeventhandler ) {
	   unshift(@hooks, "CustomEventHandler.pm");
	}

	foreach my $hook ( @hooks ) {
	    $hooklist = $hooklist . " " . $hook;
	}
	return $hooklist;
}

sub get_hostname {
    open my $hostname_f, '<', '/proc/sys/kernel/hostname';
    chomp( my $hostname = readline($hostname_f) );
    close $hostname_f;

    if ( $hostname !~ /\w+\.\w+\w/m ) {
        return "$hostname is not a FQDN ( http://goo.gl/ZCy4v )";
    }

    return $hostname . "\n";
}

sub get_les {
    my $les;
    $les = '/usr/local/sbin/les' if ( -x '/usr/local/sbin/les' );
    if ( -x $les ) {
		    return " Linux Environment Security is installed - $les";
	}
}

sub get_lfd {
    my %lfd;

    my $proclist = Cpanel::SafeRun::Errors::saferunnoerror( "ps", "awwwufx" );
    my @proclist = split( /\n/, $proclist );

    foreach my $line (@proclist) {
        if ( $line =~ /\slfd\s-\s/m ) {
            @{lfd}{qw/user pid cpu mem vsz rss tty stat start time command/} =
              split( /\s+/, $line, 11 );
        }
    }

    if ( -f '/var/run/lfd.pid' && $lfd{'pid'} ) {
        open my $lfd_f, '<', '/var/run/lfd.pid';
        chomp( $lfd_pid = readline($lfd_f) );
        close($lfd_pid);
    }

    if ( $lfd_pid =~ /$lfd{'pid'}/m && $lfd_pid ne "" ) {
        return " Running with PID " . $lfd_pid;
    }
    if ( $lfd_pid !~ /$lfd{'pid'}/m && $lfd_pid && $lfd{'pid'} ) {
        return " two LFD PIDs detected that do not match";
    }
    if ( !$lfd_pid && $lfd{'pid'} ) {
        return " process detected without PID file: $lfd{'pid'}";
    }
    if ( $lfd_pid && !$lfd{'pid'} ) {
        return " PID file found without process detected";
    }
}

sub get_litespeed {
    my %litespeed;
    my $netstat  = Cpanel::SafeRun::Errors::saferunnoerror( "ps", "awwufx" );
    my $proclist = Cpanel::SafeRun::Errors::saferunnoerror( "ps", "awwufx" );
    my @proclist = split( /\n/, $proclist ) if ($proclist);
    foreach my $line (@proclist) {
        if ( $line =~ /litespeed|lshttp/ && $line !~ /\_/m ) {
            @{litespeed}
              {qw/user pid cpu mem vsz rss tty stat start time command/} =
              split( /\s+/, $line, 11 );
        }
    }

    $litespeed{'status'} = " Running with PID " . $litespeed{'pid'}
      if ( $litespeed{'pid'} );

    return $litespeed{'status'};
}

sub get_mailscanner {
    my $mailscanner = {};
    my $proclist    = Cpanel::SafeRun::Errors::saferunnoerror( "ps", "awwufx" );
    my @proclist    = split( /\n/, $proclist );
    my $mailscanner_pid;
    foreach my $line (@proclist) {
        if ( $line =~ /\d:\d{2}\sMailScanner:\s/m ) {
            @{mailscanner}
              {qw/user pid cpu mem vsz rss tty stat start time command/} =
              split( /\s+/, $line, 11 );
        }
    }
    if ( -f '/var/run/MailScanner.pid' ) {
        open my $mailscanner_pid_f, '<', '/var/run/MailScanner.pid';
        foreach my $line ( readline($mailscanner_pid_f) ) {
            if ( $line =~ /\d+/m ) {
                chomp( $mailscanner_pid = $line );
            }
        }
        close $mailscanner_pid_f;
    }

    if ( $mailscanner_pid =~ /$mailscanner{'pid'}/m && $mailscanner_pid ne "" )
    {
        return " Running with PID " . $mailscanner_pid;
    }
    if (   $mailscanner_pid !~ /$mailscanner{'pid'}/m
        && $mailscanner_pid
        && $mailscanner{'pid'} )
    {
        return " two MailScanner PIDs detected that do not match";
    }
    if ( !$mailscanner_pid && $mailscanner{'pid'} ) {
        return " process detected without PID file: $mailscanner{'pid'}";
    }
    if ( $mailscanner_pid && !$mailscanner{'pid'} ) {
        return " PID file found without process detected";
    }
}

sub get_perl_attributes {
    my %perl;

    $perl{'usrbin'}      = 'link' if ( -l '/usr/bin/perl' );
    $perl{'usrlocalbin'} = 'link' if ( -l '/usr/local/bin/perl' );
    $perl{'usrbin'} = 'binary' if ( !-l '/usr/bin/perl' && -x '/usr/bin/perl' );
    $perl{'usrlocalbin'} = 'binary'
      if ( !-l '/usr/local/bin/perl' && -x '/usr/local/bin/perl' );

    return %perl;
}

sub get_network {
    my %wwwacct = get_wwwacct();
    my %network;
    my %ifconfig;
    my $ip;

    my $outbound_request = get("http://www.cpanel.net/showip.cgi");
    $outbound_request =~ s/Your\sip\sis:\s//;
    chomp( $network{'external_ip'} = $outbound_request );
    chomp( $network{'internal_ip'} = $wwwacct{'addr'} );
    $network{'match'} = 0;

    chomp( $wwwacct{'ethdev'} );

    my $ifconfig =
      Cpanel::SafeRun::Errors::saferunnoerror( ifconfig, $wwwacct{'ethdev'} );
    my @ifconfig = split( /\n/, $ifconfig );

    foreach my $line (@ifconfig) {
        if ( $line =~ /^\s+inet\saddr:(\d{1,3}\.){3}\d{1,3}\s{2}Bcast:/m ) {
            $line =~ s/^\s+inet\saddr://;
            $line =~ s/Bcast://;
            $line =~ s/Mask://;
            (
                $ifconfig{'ipaddr'}, $ifconfig{'broadcast'},
                $ifconfig{'netmask'}
            ) = split( ' ', $line );
        }
    }

    if ( $network{'internal_ip'} != $network{'external_ip'} ) {
        $network{'match'} = '0';
    }
    elsif ( $network{'internal_ip'} == $network{'external_ip'} ) {
        $network{'match'} = '1';
    }
    return %network;
}

sub get_nginx {
    my %nginx;

    my $proclist = Cpanel::SafeRun::Errors::saferunnoerror( "ps", "awwwufx" );
    my @proclist = split( /\n/, $proclist );

    foreach my $line (@proclist) {
        if ( $line =~ /\s+nginx:\smaster\sprocess\s/m ) {
            @{nginx}{qw/user pid cpu mem vsz rss tty stat start time command/} =
              split( /\s+/, $line, 11 );
        }
    }

    if ( -f '/var/run/nginx.pid' ) {
        open my $nginx_f, '<', '/var/run/nginx.pid';
        $nginx_pid = readline($nginx_f);
        close($nginx_pid);
    }

    if ( $nginx_pid =~ /$nginx{'pid'}/m && $nginx_pid ne "" ) {
        return " PID " . $nginx_pid;
    }
    if ( $nginx_pid !~ /$nginx{'pid'}/m && $nginx_pid && $nginx{'pid'} ) {
        return " two NGINX PIDs detected that do not match";
    }
    if ( !$nginx_pid && $nginx{'pid'} ) {
        return " process detected without PID file: $nginx{'pid'}";
    }
    if ( $nginx_pid && !$nginx{'pid'} ) {
        return " PID file found without process detected";
    }
}

sub get_osrelease {
    open my $osrelease_f, '<', '/proc/sys/kernel/osrelease';
    my $osrelease = readline($osrelease_f);
    close $osrelease_f;
    return $osrelease;
}

sub get_php4 {
    my $php4 = '/usr/local/php4/bin/php' if ( -x '/usr/local/php4/bin/php' );
    my $proc = Cpanel::SafeRun::Errors::saferunnoerror( $php4, "-v" );
    my @php4version;
    my $php4version;

    if ($proc) {
        my @proc = split( /\n/, $proc );
        foreach my $line (@proc) {
            if ( $line =~ /^PHP/m ) {
                @php4version = split( /\s+/m, $line );
                $php4version =
                  "@php4version[0] @php4version[1] @php4version[2]";
            }
        }
    }
    return $php4version;
}

sub get_php5 {
    my $php5 = '/usr/local/bin/php' if ( -x '/usr/local/bin/php' );
    my $proc = Cpanel::SafeRun::Errors::saferunnoerror( $php5, "-v" );
    my @php5version;
    my $php5version;

    if ($proc) {
        my @proc = split( /\n/, $proc );
        foreach my $line (@proc) {
            if ( $line =~ /^PHP/m ) {
                @php5version = split( /\s+/m, $line );
                $php5version =
                  "@php5version[0] @php5version[1] @php5version[2]";
            }
        }
    }
    return $php5version;
}

sub get_pkgacct {
    my $pkgacct = '1' if ( -d '/var/cpanel/lib/Whostmgr' );
    if ( $pkgacct ) {
	    return "/var/cpanel/lib/Whostmgr exists.  Custom Transfer scripts may be deployed.";
	}	
}

sub get_prm {
    my $prm = {};
    $prm{'path'} = '/usr/local/prm/prm' if ( -x '/usr/local/prm/prm' );
    $prm{'conf'} = '/usr/local/prm/conf.prm'
      if ( -f '/usr/local/prm/conf.prm' );
    $prm{'cron'} = '/etc/cron.d/prm' if ( -f '/etc/cron.d/prm' );

    if ( $prm{'cron'} ) {
        open my $cronlog_f, '<', '/var/log/cron';
        our $count = '0';
        foreach my $line ( readline($cronlog_f) ) {
            if ( $line =~ /prm -q/m && $count < 1 ) {
                @{prm}{qw/month day time hostname cronpid user cmd/} =
                  split( /\s+/, $line, 7 );
                $prm{'lastrun'} =
"$prm{'month'} $prm{'day'} $prm{'time'} by $prm{'user'} via $prm{'cmd'}";
            }
        }
    }

    if ( $prm{'path'} && $prm{'conf'} && $prm{'cron'} ) {
        return " enabled /w cron last deployed : $prm{'lastrun'}";
    }
}

sub get_selinux {
    my $sestatus = `sestatus`;
    my @sestatus = split( /\n/, $sestatus );
    my %sestatus;
    foreach my $line (@sestatus) {
        if ( $line =~ /^SELinux status:\s+enabled$/m ) {
            $sestatus{'status'} = '1';
        }
        if ( $line =~ /^Current mode:\s+enforcing$/m ) {
            $sestatus{'mode'} = '1';
        }
    }
    if ( $sestatus{'status'} == '1' && $sestatus{'mode'} == '1' ) {
        return 1;
    }
    else {
        return 0;
    }
}

sub get_system {
    my $tree;
    my $never_tree;
    my $never_update;
    my $manual_tree;
    my $manual_update;
    my $perl    = check_perl();
    my %network = get_network();

    open $cpupdate_f, '<', '/etc/cpupdate.conf';
    foreach my $test ( readline $cpupdate_f ) {
        if ( $test =~ /^cpanel/i ) {
            $tree = $test;
            $tree =~ s/^CPANEL=//;
            $tree = uc($tree);
        }
        if ( $test =~ /^cpanel=never/i ) {
            $never_tree = get_cpanelversion();
            $never_tree =~ s/^\d+\.\d+\.\d+-//;
            $never_tree =~ s/_\d{5}$//;
            $tree         = $never_tree;
            $never_update = '1';
        }
        if ( $test =~ /^cpanel=/i && $test =~ /manual/i ) {
            $manual_tree = get_cpanelversion();
            $manual_tree =~ s/^\d+\.\d+\.\d+-//;
            $manual_tree =~ s/_\d{5}$//;
            $tree          = $manual_tree;
            $manual_update = '1';
        }
    }
    close $cpupdate_f;

    my %cpuinfo = get_cpuinfo();

    %system = (
        "cpanelversion" => get_cpanelversion(),
        "cpuinfo"       => $cpuinfo{'model'},
        "environment"   => get_environment(),
        "numcores"      => $cpuinfo{'numcores'},
        "hardware"      => Cpanel::SafeRun::Errors::saferunnoerror( "uname", "-i" ),
        "hostname"      => get_hostname(),
        "kernel"        => get_osrelease(),
        "mhz"           => $cpuinfo{'mhz'},
        "uptime"        => get_uptime(),
        "tree"          => $tree,
        "never_update"  => $never_update,
        "manual_update" => $manual_update,
        "internal_ip"   => $network{'internal_ip'},
        "external_ip"   => $network{'external_ip'},
        "match"         => $network{'match'},
        "perl"          => $perl,
        "hooks"         => get_hooks(),
        "pkgacct"       => get_pkgacct()
    );

    return %system;
}

sub get_third_party {

    my %thirdparty = (
	    "apf"         => get_apf(),
        "assp"        => detect_assp(),
        "csf"         => get_csf(),
        "les"         => get_les(),
        "lfd"         => get_lfd(),
        "litespeed"   => get_litespeed(),
        "mailscanner" => get_mailscanner(),
        "nginx"       => get_nginx(),
        "prm"         => get_prm()
    );

    ## SELINUX detection
    if ( get_selinux() ) {
        $thirdparty{'selinux'} = ' enabled';
    }

    ## Printing routine for development

    my @thirdparty = %thirdparty;
}

sub get_uname {

}

sub get_uptime {
    my $proc = Cpanel::SafeRun::Errors::saferunnoerror("uptime");
    $proc =~ s/^\s//;
    return $proc;
}

sub get_wwwacct {
    my %wwwacct;

    open my $wwwacctconf_f, '<', '/etc/wwwacct.conf';
    foreach my $line ( readline $wwwacctconf_f ) {
        if ( $line =~ /^ADDR\s/m ) {
            $line =~ s/^ADDR\s//;
            $wwwacct{'addr'} = $line;
        }
        if ( $line =~ /^ETHDEV\s/m ) {
            $line =~ s/^ETHDEV\s//;
            $wwwacct{'ethdev'} = $line;
        }
    }
    close $wwwacctconf_f;
    return %wwwacct;
}

