#!/usr/bin/perl

# SSP 2.0

use strict;
use warnings;
use lib '/usr/local/cpanel';
use Cpanel::SafeRun::Errors ();
use LWP::Simple;
use Term::ANSIColor qw(:constants);
use Cpanel::Sys::OS;
use Cpanel::OSSys;
use Sys::Hostname;

$Term::ANSIColor::AUTORESET = 1;

my $apachectl = '/usr/local/apache/bin/apachectl';
my $os = Cpanel::OSSys::getos();
my @process_list = get_process_list();
chomp( my %hostinfo = get_hostinfo() );
chomp( my %cpuinfo = get_cpuinfo() );

print "\n";

print_hostname();
print_os();
check_selinux_status();
check_runlevel();
print_cpanel_birthday();
print_cpanel_version();
check_for_cpanel_update();
check_for_upcp();
check_valid_upcp();
print_kernel_and_cpu();
check_for_sandy_bridge();
print_perl_version();
print_uptime();
check_network_mismatch();
check_for_lve_environment();
print_apache_version();
print_apache_uptime();
check_for_rawopts();
check_for_rawenv();
print_php_configuration();
check_sysinfo();
check_perl();
check_root_suspended();
check_limitsconf();
check_disk_space();
check_disk_inodes();
check_for_hooks();
check_for_assp();
check_for_huge_apache_logs();
check_easy_skip_cpanelsync();
check_pkgacct_override();
check_for_bad_rpms();
check_for_varnish();
check_for_litespeed();
check_for_nginx();
check_for_mailscanner();
check_for_apf();
check_for_csf();
check_for_prm();
check_for_les();
check_for_1h();
check_for_webmin();


sub get_process_list {

    ## used for checking for nginx, litespeed, mailscanner, etc. 
    ## better (?) would be to run lsof and check process names on listening ports.

    my @process_list;
    my $process_list = Cpanel::SafeRun::Errors::saferunnoerror( 'ps', 'auxwwwf' );
    if ( $process_list ) { 
        @process_list = split /\n/, $process_list;
    }

    return @process_list;
}

## precedes informational items (e.g., "Hostname:")
sub print_start {
    my $text = shift;
    print BOLD YELLOW ON_BLACK $text;
}
## for informational items (e.g., the server's hostname)
sub print_normal {
    my $text = shift;
    print BOLD CYAN ON_BLACK "$text\n";
}
## for important things (e.g., "Hostname is not a FQDN")
sub print_warning {
    my $text = shift;
    print BOLD RED ON_BLACK "$text\n";
}
## for other imporant things (e.g., "You are in an LVE, do not restart services")
sub print_warning_underline {
    my $text = shift;
    print BOLD UNDERLINE "$text\n";
}

sub print_hostname {
    my $hostname = hostname();

    print_start( 'Hostname: ' );

    if ( $hostname !~ /([\w-]+)\.([\w-]+)\.(\w+)/ ) { 
        print_warning( "$hostname is not a FQDN ( en.wikipedia.org/wiki/Fully_qualified_domain_name )" );
    }   
    else {
        print_normal( $hostname );
    }   
}

sub print_os {
    my $release_info;

    print_start( 'OS: ' );

    if ( -e '/etc/redhat-release' ) { 
        if ( open my $rr_fh, '<', '/etc/redhat-release' ) { 
            while ( <$rr_fh> ) { 
                chomp( $release_info = $_ );
            }
            close $rr_fh;
        }
        print_normal( $release_info . " ($hostinfo{'environment'})" );
    }    
    elsif ( $os eq 'freebsd' ) { 
        print_normal( 'FreeBSD' );
    }
    else {
        print_warning( "Unknown (no /etc/redhat-release, and not FreeBSD)" );
    }
}

sub check_selinux_status {
    my @selinux_status = Cpanel::SafeRun::Errors::saferunnoerror( 'sestatus' );

    return if ! @selinux_status;

    for my $line ( @selinux_status ) {
        if ( $line =~ m{ \A Current \s mode: \s+ enforcing }xms ) {
            print_start( 'SELinux: ' );
            print_warning( 'enabled and enforcing!' );
        }
    }
}

sub check_runlevel {
    if ( $os eq 'linux' ) {
        my $runlevel;
        my $who_r = Cpanel::SafeRun::Errors::saferunnoerror( 'who', '-r' );

        # CentOS 5.7, 5.8:
        #         run-level 3  2012-01-25 10:38                   last=S
        if ( $who_r =~ m{ \A \s+ run-level \s (\d) }xms ) {
            $runlevel = $1;
        }    

        if ( $runlevel && $runlevel != '3' ) {
            print_start( 'Runlevel: ' );
            print_warning(  "runlevel is not 3 (current runlevel: $runlevel)" );
        }    
    }
}

sub print_cpanel_birthday {
    my ( $birthday_file, $atime );

    if ( -f '/var/log/cpanel-install-thread0.log' ) {
        $birthday_file = '/var/log/cpanel-install-thread0.log';
    }
    elsif ( -f '/var/log/cpanel-install.log' ) {
        $birthday_file = '/var/log/cpanel-install.log';
    }

    if ( $birthday_file ) {
        ( undef, undef, undef, undef, undef, undef, undef, undef, $atime ) = stat $birthday_file;
        my $birthday = localtime $atime;
        print_start( 'cPanel Birthday: ' );
        print_normal( $birthday );
    }
}

sub print_cpanel_version {
    my ( $cpanel_version, $cpanel_tier );

    if ( open my $version_fh, '<', '/usr/local/cpanel/version' ) {
        while ( <$version_fh> ) {
            chomp( $cpanel_version = $_ );
        }
        close $version_fh;
    }
    else {
        $cpanel_version = 'Unknown (could not open/read /u/l/c/version ?)';
    }

    if ( open my $cpupdate_fh, '<', '/etc/cpupdate.conf' ) {
        while ( <$cpupdate_fh> ) {
            if ( m{ \A CPANEL=(.*) }xmsi ) {
                chomp( $cpanel_tier = $1 );
            }
        }
    }
    else {
        $cpanel_tier = 'Unknown (could not open/read /etc/cpupdate.conf ?)';
    }

    print_start( 'cPanel Version: ' );
    print_normal( "${cpanel_version}-" . uc( $cpanel_tier) );
}

sub check_for_cpanel_update {

    my ( $local_tier_name, $local_tier_version, $remote_tier_version );

    ## get local tier name 
    if ( open my $cpupdateconf_fh, '<', '/etc/cpupdate.conf' ) {
        while ( <$cpupdateconf_fh> ) {
            if ( m{ \A CPANEL=(\w+) }xms ) {
                chomp( $local_tier_name =  lc( $1 ) );
            }
        }
        close $cpupdateconf_fh;
    }    
    else {
        $local_tier_name = "Unknown ( can't open/read /etc/cpupdate.conf ?)";
    }    

    ## get local tier version
    if ( open my $cpanel_version_fh, '<', '/usr/local/cpanel/version' ) {
        while ( <$cpanel_version_fh> ) {
            chomp( $local_tier_version = $_ );
        }
        close $cpanel_version_fh;
    }    
    else {
        $local_tier_version = "Unknown (could not open/read /u/l/c/version ?)";
    }    

    if ( $local_tier_name !~ /Unknown/ ) {
        if ( $local_tier_version !~ /Unknown/ ) {

            ## compare the local tier version with that of the currently available version.
            local $SIG{'ALRM'} = sub { die(); };
            alarm 5;
            my $updatefile = get( 'http://httpupdate.cpanel.net/cpanelsync/TIERS' );
            alarm 0;

            if ( ! $updatefile ) {
                print_start( 'cPanel update check: ' );
                print_warning( 'Request timed out for http://httpupdate.cpanel.net/cpanelsync/TIERS' );
            }
            return if ! $updatefile;

            if ( $updatefile =~ m{ $local_tier_name : (\d+\.\d+\.\d+\.\d+) }xms ) {
                $remote_tier_version = $1;
            }

            my $local_tier_version_converted = $local_tier_version;
            $local_tier_version_converted =~ s/\.//g;
            my $remote_tier_version_converted = $remote_tier_version;
            $remote_tier_version_converted =~ s/\.//g;

            ## FreeBSD won't ever go past 11.30
            ## http://www.cpanel.net/products/cpanelwhm/system-requirements.html
            return if ( ( $os eq 'freebsd' ) && substr( $local_tier_version_converted, 0, 4 ) == '1130' );

            if ( $local_tier_version_converted < $remote_tier_version_converted ) {
                print_start( 'cPanel update check: ' );
                print_warning( " UPDATE AVAILABLE: $local_tier_version -> $remote_tier_version" );
            }
        }
    }
}

sub check_for_upcp {
    my $upcp_running = 0;
    
    for my $line ( @process_list ) {
        if ( $line =~ /upcp/ ) {
            $upcp_running = 1;
            last;
        }
    }

    if ( $upcp_running == 1 ) {
        print_start( 'upcp check: ' );
        print_warning( 'upcp is currently running' );
    }
}

sub check_valid_upcp {
    my $updatenow_static = '/scripts/updatenow.static';
    my $updatenow_valid = 0;

    if ( ! -f $updatenow_static ) {
        print_start( 'Valid updatenow.static: ' );
        print_warning( "$updatenow_static does not exist as a file!" );
    }
    else {
        open my $updatenow_fh, '<', $updatenow_static;
        while ( <$updatenow_fh> ) {
            if ( /our \$VERSION_BUILD/ ) {
                $updatenow_valid = 1;
                last;
            }
        }
        close $updatenow_fh;
    }
    if ( ! $updatenow_valid ) {
        print_start( 'Valid updatenow.static: ' );
        print_warning( "No VERSION_BUILD info found in $updatenow_static, could be broken!" );
    }
}

sub print_kernel_and_cpu {
    print_start( 'Kernel/CPU: ');
    print_normal( "$hostinfo{'kernel'} $hostinfo{'hardware'} $hostinfo{'environment'} $cpuinfo{'model'} w/ $cpuinfo{'numcores'} core(s) @ $cpuinfo{'mhz'} Mhz" );
}

sub get_hostinfo {
    my %hostinfo = (
        'kernel'        => Cpanel::SafeRun::Errors::saferunnoerror('uname', '-r' ),
        'hardware'      => Cpanel::SafeRun::Errors::saferunnoerror('uname', '-i' ),
        'environment'   => get_environment(),
    );

    return %hostinfo;
}

sub get_environment {
    if ( open my $envtype_fh, '<', '/var/cpanel/envtype' ) {
        my $envtype = readline( $envtype_fh );
        close $envtype_fh;
        return $envtype;
    }
    else {
        return 'Unknown (could not open/read /var/cpanel/envtype ?)';
    }
}

sub get_cpuinfo {
    my %cpuinfo;
    open( my $cpuinfo_fh, '<', '/proc/cpuinfo' );

    for my $line ( readline $cpuinfo_fh ) {
        if ( $line =~ /^model name/m ) {
            $line =~ s/^model name\s+:\s+//;
            $line =~ s/\(R\)//g;
            $line =~ s/\(tm\)//g;
            $line =~ s/\s{2,}/ /;
            $line =~ s/ \@/\@/;
            $cpuinfo{'model'} = $line;
            $cpuinfo{'numcores'}++;
        }
        if ( $line =~ /^cpu MHz/m ) {
            $line =~ s/^cpu MHz\s+:\s+//;
            $cpuinfo{'mhz'} = $line;
        }
    }
    close $cpuinfo_fh;
    return %cpuinfo;
}

sub check_for_sandy_bridge {
    return if ! -e '/proc/cpuinfo';

    my $sandy_bridge = 0; 

    if ( open my $cpuinfo_fh, '<', '/proc/cpuinfo' ) {
        while ( <$cpuinfo_fh> ) {
            chomp;
            if ( /^flags/ ) {
                if ( /avx/ ) {
                    $sandy_bridge = 1; 
                }
            }
            # http://en.wikipedia.org/wiki/Sandy_Bridge#Server_platform
            if ( /^model name/ && /Xeon/ && /(?:46(\d{2}))|2687W|2690|2680|2670|2665|2660|2650|2650L|2667|2640|2630|2620|2630L|2643|2609|2603|2637|2470|2450|2450L|2440|2430|2420|2430L|2407|2403|1660|1650|1620|1290|1280|1275|1270|1260L|1245|1240|1235|1230|1225|1220|1220L/ && ! /E(31270|31230)/ ) {
                $sandy_bridge = 1; 
            }
        }
        close $cpuinfo_fh;
    }    

    if ( $sandy_bridge == 1 ) {
        print_start( 'AVX / Sandy Bridge: ' );
        print_warning( 'detected! compile ssp.cptechs.info/glibc_avx.tar.gz and run ./exe (check for "Illegal instruction")' );
    }    
}

sub print_perl_version {
    my $perl_v = Cpanel::SafeRun::Errors::saferunnoerror( 'perl', '-v' );
    my @perl_v = split /\n/, $perl_v;

    my $perl_version;
    for my $line ( @perl_v ) {
        if ( $line =~ m{ \A This \s is \s perl, \s (\S+) \s }xms ) {
            $perl_version = $1;
            last;
        }
    }

    if ( $perl_version ) {
        print_start( 'Perl version: ' );
        print_normal( $perl_version );
    }
    else {
        print_start( 'Perl version: ' );
        print_warning( 'could not determine perl version (perl -v)' );
    }
}

sub print_uptime {
    chomp( my $uptime = Cpanel::SafeRun::Errors::saferunnoerror( 'uptime' ) );
    print_start( 'Uptime: ');
    print_normal( $uptime );
}

sub check_network_mismatch {
    my $mainip;

    if ( open my $mainip_fh, '<', '/var/cpanel/mainip' ) {
        chomp( $mainip = readline( $mainip_fh ) );
        close $mainip_fh;
    }

    local $SIG{'ALRM'} = sub { die(); };
    alarm 5;
    chomp( my $external_ip_address = get( 'http://cpanel.net/showip.cgi' ) );
    alarm 0;

    if ( $mainip and $external_ip_address ) {
        if ( $mainip ne $external_ip_address ) {
            print_start( 'Network Mismatch: ' );
            print_warning( "main IP address $mainip doesn't match external one $external_ip_address" );
        }
    }
}

sub check_for_lve_environment {

# pam_lve 0.2 prints this after su or sudo:
#
# # /bin/su -
# Password: 
# ***************************************************************************
# *                                                                         *
# *             !!!!  WARNING: YOU ARE INSIDE LVE !!!!                      *
# *IF YOU RESTART ANY SERVICES STABILITY OF YOUR SYSTEM WILL BE COMPROMIZED *
# *        CHANGE UID OF THE USER YOU ARE USING TO SU/SUDO                  *
# *                             MORE INFO:                                  *
# *http://www.cloudlinux.com/blog/clnews/read-this-if-you-use-su-or-sudo.php*
# *                                                                         *
# ***************************************************************************

# pam_lve 0.3 won't put wheel users in an LVE after su or sudo:
# http://cloudlinux.com/blog/clnews/read-this-if-you-use-su-or-sudo.php

    if ( -e '/usr/sbin/lveps' ) {
        my $lve_check = `/usr/sbin/lveps -p | grep " $$ "`;
        if ( $lve_check ) {
            print "\n";
            print_warning_underline( ' !! YOU ARE IN AN LVE - DO *NOT* RESTART ANY SERVICES !!' );
            print_warning_underline( ' !! YOU ARE IN AN LVE - DO *NOT* RESTART ANY SERVICES !!' );
            print_warning_underline( ' !! YOU ARE IN AN LVE - DO *NOT* RESTART ANY SERVICES !!' );
            print "\n";
        }
    }    
}

sub print_apache_version {

    my ( $apache_version, $apache_built, $apache_ea_version );

    if ( -x $apachectl ) {
        my $apachectl_output = Cpanel::SafeRun::Errors::saferunnoerror( $apachectl, '-v' );
        my @apachectl_output = split /\n/, $apachectl_output;
        for my $line ( @apachectl_output ) {
            if ( $line =~ m{ \A Server \s version: \s (.*) \z }xms ) {
                $apache_version = $1;
            }
            if ( $line =~ m{ \A Server \s built: \s (.*) \z }xms ) {
                $apache_built = $1;
            }
            if ( $line =~ m{ \A Cpanel::Easy::Apache \s (.*) \z }xms ) {
                $apache_ea_version = $1;
            }
        }
        print_start( 'Apache Version: ' );
        print_normal( $apache_version );
        print_start( 'Apache Built: ' );
        print_normal( "$apache_built w/ $apache_ea_version" );
    }
    else {
        print_start( 'Apache Info: ' );
        print_warning( "$apachectl not executable?" );
    }
}

sub print_apache_uptime {
    my ( $apache_uptime, $apache_generations );

    local $SIG{'ALRM'} = sub { die(); };
    alarm 5;
    my $apache_status = get( 'http://localhost/whm-server-status' );
    alarm 0;

    print_start( 'Apache Uptime: ' );

    if ( $apache_status ) {
        my @apache_status = split /\n/, $apache_status;

        for my $line ( @apache_status ) {
            if ( $line =~ m{ Server \s uptime: \s (.*) </dt> }xms ) {
                $apache_uptime = $1;
            }
            if ( $line =~ m{ Parent \s Server \s Generation: (.*) </dt> }xms ) {
                $apache_generations = $1;
            }
        }
        print_normal( "$apache_uptime w/ $apache_generations generation(s)" );
    }
    else {
        print_warning( 'Apache is not up (failed: http://localhost/whm-server-status)' );
    }
}

sub check_for_rawopts {
    my $rawopts_dir = '/var/cpanel/easy/apache/rawopts';
    my @dir_contents;

    if ( -d $rawopts_dir ) {
        opendir ( my $dir_fh, $rawopts_dir );
        @dir_contents = grep { ! /^\./ && ! /^\.\./ } readdir $dir_fh;
        closedir $dir_fh;
    }
 
    if ( @dir_contents ) {
        print_start( 'Rawopts Detected: ' );
        print_warning( 'check /var/cpanel/easy/apache/rawopts !' );
    }       
}

sub check_for_rawenv {
    my $rawenv_dir = '/var/cpanel/easy/apache/rawenv';
    my @dir_contents;

    if ( -d $rawenv_dir ) {
        opendir ( my $dir_fh, $rawenv_dir );
        @dir_contents = grep { ! /^\./ && ! /^\.\./ } readdir $dir_fh;
        closedir $dir_fh;
    }

    if ( @dir_contents ) {
        print_start( 'Rawenv detected: ' );
        print_warning( 'check /var/cpanel/easy/apahe/rawenv !' );
    }
}

sub print_php_configuration {
    my $phpconf = '/usr/local/apache/conf/php.conf.yaml';
    return if ! -f $phpconf;

    my ( $phpversion, $php5version, $php4version, $php4handler, $php5handler, $suexec );

    open my $phpconf_fh, '<', $phpconf;
    while ( <$phpconf_fh> ) {
        if ( /^phpversion: (\d)/ ) {
            $phpversion = $1;
        }
        if ( /^php4: (.*)/ ) {
            $php4handler = $1;
        }
        if ( /^php5: (.*)/ ) {
            $php5handler = $1;
        }
        if ( /^suexec: (.*)/ ) {
            $suexec = $1;
        }
    }
    close $phpconf_fh;

    if ( $suexec eq 1 ) {
        $suexec = '/w suexec';
    }
    else {
        $suexec = 'without suexec';
    }

    if ( $phpversion == 5 ) {
        if ( -x '/usr/bin/php' ) {
            my $php_v = Cpanel::SafeRun::Errors::saferunnoerror( '/usr/bin/php', '-v' );
            my @php_v = split /\n/, $php_v;
            if ( $php_v[0] =~ /^PHP\s(\S+)\s(\S+)/ ) {
                $php5version = $1;
            }
            print_start( 'PHP Default: ' );
            print_normal( "PHP $php5version $php5handler $suexec" );
        }

        if ( $php4handler ne 'none' ) {
            my $php_v = Cpanel::SafeRun::Errors::saferunnoerror( '/usr/local/php4/bin/php', '-v' );
            my @php_v = split /\n/, $php_v;
            if ( $php_v[0] =~ /^PHP\s(\S+)\s(\S+)/ ) {
                $php4version = $1;
            }
            print_start( 'PHP Secondary: ' );
            print_normal( "PHP $php4version $php4handler $suexec" );
        }
    }

    if ( $phpversion == 4 ) {
        if ( -x '/usr/local/php4/bin/php' ) {
            my $php_v = Cpanel::SafeRun::Errors::saferunnoerror( '/usr/local/php4/bin/php', '-v' );
            my @php_v = split /\n/, $php_v;
            if ( $php_v[0] =~ /^PHP\s(\S+)\s(\S+)/ ) {
                $php4version = $1;
            }
            print_start( 'PHP Default: ' );
            print_normal( "PHP $php4version $php4handler $suexec" );
        }

        if ( $php5handler ne 'none' ) {
            my $php_v = Cpanel::SafeRun::Errors::saferunnoerror( '/usr/bin/php', '-v' );
            my @php_v = split /\n/, $php_v;
            if ( $php_v[0] =~ /^PHP\s(\S+)\s(\S+)/ ) {
                $php5version = $1;
            }
            print_start( 'PHP Secondary: ' );
            print_normal( "PHP $php5version $php5handler $suexec" );
        }
    }
}

sub check_sysinfo {
    return if ! -x '/scripts/gensysinfo';

    my $sysinfo_config = '/var/cpanel/sysinfo.config';

    my ( $release, $ises ) = Cpanel::Sys::OS::getreleaseversion();
    chomp( my $arch = Cpanel::SafeRun::Errors::saferunnoerror( 'uname', '-i' ) );

    my $rebuild = 0;

    if ( ! -e $sysinfo_config ) {
        print_start( 'sysinfo: ' );
        print_warning( 'does not exist, running /scripts/gensysinfo to fix' );
        Cpanel::SafeRun::Errors::saferunnoerror( '/scripts/gensysinfo' );
    }
    else {
        open my $sysinfo_fh, '<', $sysinfo_config;
        while ( <$sysinfo_fh> ) {
            chomp;
            if ( m{ \A rpm_arch=(.*) }xms ) {
                if ( $arch ne $1 ) {
                    $rebuild = 1;
                }
            }
            if ( m{ \A release=(.*) }xms ) {
                if ( $release ne $1 ) {
                    $rebuild = 1;
                }
            }
            if ( m{ \A ises=(.*) }xms ) {
                if ( $ises ne $1 ) {
                    $rebuild = 1;
                }
            }
        }
        close $sysinfo_fh;
    }

    if ( $rebuild == 1 ) {
        Cpanel::SafeRun::Errors::saferunnoerror( 'mv', $sysinfo_config, "${sysinfo_config}.ssp.$^T" );
        Cpanel::SafeRun::Errors::saferunnoerror( '/scripts/gensysinfo' );
        print_start( 'sysinfo: ' );
        print_warning( '/var/cpanel/sysinfo.config contained errors and was rebuilt' );
    }
}

sub check_perl {
    my $usr_bin_perl = '/usr/bin/perl';
    my $usr_local_bin_perl = '/usr/local/bin/perl';

    if ( ! $usr_bin_perl ) {
        print_start( 'perl: ' );
        print_warning( "$usr_bin_perl does not exist!" );
    }
    if ( ! $usr_local_bin_perl ) {
        print_start( 'perl: ' );
        print_warning( "$usr_local_bin_perl does not exist!" );
    }

    if ( -l $usr_bin_perl and -l $usr_local_bin_perl ) {
        print_start( 'perl: ' );
        print_warning( "$usr_bin_perl and $usr_local_bin_perl are both symlinks!" );
    }

    if ( -x $usr_bin_perl and ! -l $usr_bin_perl ) {
        if ( -x $usr_local_bin_perl and ! -l $usr_local_bin_perl ) {
            print_start( 'perl: ' );
            print_warning( "$usr_bin_perl and $usr_local_bin_perl are both binaries!" );
        }
    }
}

sub check_root_suspended {
    if ( -e '/var/cpanel/suspended/root' ) {
        print_start( 'root suspended: ' );
        print_warning( 'the root account is suspended! Unsuspend it to avoid problems.' );
    }
}

sub check_limitsconf {
    my @limitsconf;

    if ( open my $limitsconf_fh, '<', '/etc/security/limits.conf' ) {
        while ( <$limitsconf_fh> ) {
            push @limitsconf, $_;
        }
        close $limitsconf_fh;
    }

    @limitsconf = grep { ! /^(\s+|#)/ } @limitsconf;

    if ( @limitsconf ) {
        print_start( 'limits.conf: ' );
        print_warning( 'custom limits defined in /etc/security/limits.conf!' );
    }
}

sub check_disk_space {
    my @df = Cpanel::SafeRun::Errors::saferunnoerror( 'df' );
    for my $line ( @df ) {
        if ( $line =~ m{ 100% \s+ (.*) }xms ) {
            my $partition = $1;
            print_start( 'Disk space: ' );
            print_warning( "100% usage on $partition" );
        }
    }
}

sub check_disk_inodes {
    my @df_i = Cpanel::SafeRun::Errors::saferunnoerror( 'df', '-i' );
    for my $line ( @df_i ) {
        if ( $line =~ m{ 100% \s+ (.*) }xms ) {
            my $partition = $1;
            print_start( 'Disk inodes: ' );
            print_warning( "100% inode usage on $partition" );
        }
    }
}

sub check_for_hooks {
    if ( -f '/usr/local/cpanel/Cpanel/CustomEventHandler.pm' ) {
        print_start( 'Hooks: ' );
        print_warning( '/usr/local/cpanel/Cpanel/CustomEventHandler.pm exists!' );
    }

    my @hooks;
    if ( -d '/scripts' ) {
        opendir my $scripts_fh, '/scripts';
        @hooks = grep { /^(pre|post)/ } readdir $scripts_fh;
        closedir $scripts_fh;
    }

    # these exist by default
    @hooks = grep { ! /postsuexecinstall/ && ! /post_sync_cleanup/ } @hooks;

    my $hooks_output;
    if ( @hooks ) {
        print_start( 'Hooks: ' );
        for my $hook ( @hooks ) {
            $hook = '/scripts/' . $hook;
            $hooks_output .= " $hook ";
        }
        print_warning( $hooks_output );
    }
}

sub check_for_assp {
    my $assp;
    my @port_25_processes;

    if ( $os eq 'linux' ) { 
        my @lsof_25 = Cpanel::SafeRun::Errors::saferunnoerror( 'lsof', '-i', 'tcp:25' );
        for my $line ( @lsof_25 ) { 
            if ( $line =~ m{ (\S+) \s+ (?:.*) \s TCP (?:.*):smtp \s \(LISTEN\) }xms ) { 
                push( @port_25_processes, $1 );
            }
        }

        if ( grep { m{ \A assp\.pl }xms } @port_25_processes ) { 
            print_start( 'ASSP: ' );
            print_warning( 'assp.pl is listening on port 25' );
        }

        if ( grep { m{ \A perl \z }xms } @port_25_processes ) { 
            print_start( 'Exim: ' );
            print_warning( 'something other than Exim found listening on port 25' );
        }
    }   
}

sub check_easy_skip_cpanelsync {
    if ( -e '/var/cpanel/easy_skip_cpanelsync' ) {
        print_start( 'Touchfile: ' );
        print_warning( '/var/cpanel/easy_skip_cpanelsync exists! ');
    }
}

sub check_for_bad_rpms {
    my @rpm_list = Cpanel::SafeRun::Errors::saferunnoerror( 'rpm', '-qa' );

    my @bad_rpms = grep { /^(php-|kde-|psa-|clamav|clamd)|(http|apache|pear)/ } @rpm_list;
    if ( @bad_rpms ) {
        @bad_rpms = sort @bad_rpms;
        for my $bad_rpm ( @bad_rpms ) {
            print_start( 'Bad rpm: ' );
            print_warning( $bad_rpm );
        }
    }
}

sub check_for_varnish {
    my $varnish;
    my @port_80_processes;

    if ( $os eq 'linux' ) { 
        my @lsof_80 = Cpanel::SafeRun::Errors::saferunnoerror( 'lsof', '-i', 'tcp:80' );
        for my $line ( @lsof_80 ) {
            # TODO: just check for ^httpd ?
            if ( $line =~ m{ (\S+) \s+ (?:.*) \s TCP (?:.*):http \s \(LISTEN\) }xms ) { 
                push( @port_80_processes, $1 );
            }
        }

        if ( grep { m{ \A varnish }xms } @port_80_processes ) { 
            print_start( 'Varnish: ' );
            print_warning( 'varnish is listening on port 80' );
        }
    }   
}

sub check_for_litespeed {
    my $litespeed = 0;

    for my $line ( @process_list ) {
        if ( $line =~ /litespeed|lshttp/ and $line !~ /\_/ ) {
            $litespeed = 1;
            last;
        }
    }

    if ( $litespeed == 1 ) {
        print_start( 'litespeed: ' );
        print_warning( 'is running' );
    }
}

sub check_for_nginx {
    my $nginx = 0;

    for my $line ( @process_list ) {
        if ( $line =~ /\s+nginx:\smaster\sprocess\s/ ) {
            $nginx = 1;
            last;
        }
    }

    if ( $nginx == 1 ) {
        print_start( 'nginx: ' );
        print_warning( 'is running' );
    }
}

sub check_for_mailscanner {
    my $mailscanner = 0;

    for my $line ( @process_list ) {
        if ( $line =~ /\d:\d{2}\sMailScanner:\s/ ) {
            $mailscanner = 1;
            last;
        }
    }

    if ( $mailscanner == 1 ) {
        print_start( 'Mailscanner: ' );
        print_warning( 'is running' );
    }
}

sub check_for_huge_apache_logs {
    my @logs = qw( access_log error_log suphp_log suexec_log mod_jk.log modsec_audit.log modsec_debug.log );
    for my $log ( @logs ) {
        $log = '/usr/local/apache/logs/' . $log;
        if ( -e $log ) {
            my $size = ( stat( $log ) )[7];
            if ( $size > 2_100_000_000 ) {
                print_start( 'Huge Apache log: ' );
                print_warning( "$log ($size bytes)" );
            }
        }
    }
}

sub check_for_apf {
    my $chkconfig_apf = Cpanel::SafeRun::Errors::saferunnoerror( 'chkconfig', '--list', 'apf');
    if ( $chkconfig_apf ) {
        if ( $chkconfig_apf =~ /3:on/ ) {
            print_start( 'APF: ' );
            print_normal( 'installed, may be enabled.' );
        }
    }
}

sub check_for_csf {
    my $lfd = 0;
    my $csf = Cpanel::SafeRun::Errors::saferunnoerror( 'whereis', 'csf' );

    if ( $csf =~ /\// ) {
        print_start( 'CSF: ' );
    }
    else {
        return;
    }

    for my $line ( @process_list ) {
        if ( $line  =~ /\slfd\s/ ) {
            $lfd = 1;
            last;
        }
    }

    if ( $lfd ) {
        print_warning( 'installed, LFD is running' );
    }
    else {
        print_warning( 'installed, LFD is not running' );
    }
}

sub check_for_prm {
    if ( -e '/usr/local/prm' ) {
        print_start( 'PRM: ' );
        print_warning( 'PRM exists at /usr/local/prm' );
    }
}

sub check_for_les {
    if ( -e '/usr/local/sbin/les' ) {
        print_start( 'LES: ' );
        print_warning( 'Linux Environment Security is installed at /usr/local/sbin/les' );
    }
}

sub check_pkgacct_override {
    if ( -d '/var/cpanel/lib/Whostmgr' ) {
        print_start( 'pkgacct override: ' );
        print_warning(' /var/cpanel/lib/Whostmgr exists, override may exist' );
    }
}

sub check_for_1h {
    my $one_h = 0;
    my ( $hive_module, $guardian );

    if ( -d '/usr/local/1h' ) {
        $one_h = 1;
        if ( -x $apachectl ) {
            my $apache_modules = Cpanel::SafeRun::Errors::saferunnoerror( $apachectl, '-M' );
            my @apache_modules = split /\n/, $apache_modules;
            for my $line ( @apache_modules ) {
                if ( $line =~ /hive/ ) {
                    $hive_module = 'loaded';
                }
                else {
                    $hive_module = 'not active';
                }
            }
        }
        if ( -x '/usr/local/1h/sbin/guardian' ) {
            for my $line ( @process_list ) {
                if ( $line =~ /Guardian/ ) {
                    $guardian = 'running';
                }
                else {
                    $guardian = 'not running';
                }
            }
        }
        else {
            $guardian = 'not running'
        }
    }

    if ( $one_h == 1 ) {
        print_start( '1H Software: ' );
        print_warning( "/usr/local/1h exists. hive apache module: [ $hive_module ] Guardian process: [ $guardian ]" );
    }
}

sub check_for_webmin {
    my @lsof_10000 = Cpanel::SafeRun::Errors::saferunnoerror( 'lsof', '-i', 'tcp:10000' );
    if ( @lsof_10000 ) {
        print_start( 'Webmin: ' );
        print_warning( 'Port 10000 is listening, webmin may be running' );
    }
}
