--- ssp-3.22	2012-09-11 21:23:29.000000000 +0400
+++ ssp-3.23	2012-09-19 17:40:01.000000000 +0400
@@ -20,7 +20,7 @@
 use IO::Socket::INET;
 
 $| = 1;
-my $version = '3.22';
+my $version = '3.23';
 $Term::ANSIColor::AUTORESET = 1;
 
 ######################
@@ -37,6 +37,7 @@
 my @rpm_list;                   # rpm -qa
 my @apache_version_output;      # apache -v
 my @apache_modules_output;      # apache -M
+my @mysql_rpm_versions;
 
 my %cpuinfo;
 if ( $os eq 'freebsd' ) {
@@ -140,6 +141,11 @@
 check_wwwacctconf_for_incorrect_minuid();
 check_roots_cron_for_certain_commands();
 check_for_missing_or_commented_customlog();
+check_for_cpsources_conf();
+check_for_apache_rlimits();
+check_if_crond_is_running();
+check_for_usr_local_lib_libz_so();
+check_for_extra_uid_or_gid_0_user();
 
 # [3RDP]
 check_for_assp();
@@ -159,6 +165,8 @@
 build_rpm_list();
 
 # These require build_rpm_list() to have been run, so that @rpm_list is populated
+populate_mysql_rpm_versions_array();
+check_for_mysql_4();
 check_for_additional_rpms();
 check_mysql_rpm_mismatch();
 check_php_libmysqlclient_mismatch();
@@ -413,8 +421,8 @@
     $last_update = $last_update / 86400;
     $last_update = sprintf '%.1f', $last_update;
 
-    print_info( 'cPanel Version: ' );
-    print_normal( "${cpanel_version}-" . uc( $cpanel_tier ) . " (Last updated $last_update days ago)" );
+    print_info( 'cPanel Info: ' );
+    print_normal( "Version: ${cpanel_version} " . '  Tier: ' . uc( $cpanel_tier ) . " (Last updated $last_update days ago)" );
 }
 
 sub check_for_cpanel_update {
@@ -567,12 +575,12 @@
             }
         }
         if ( $apache_uptime and $apache_generations ) {
-            print_info( 'Apache uptime: ' );
+            print_info( 'Apache Uptime: ' );
             print_normal( "$apache_uptime w/ $apache_generations generation(s)" );
         }
     }    
     else {
-        print_info( 'Apache uptime: ' );
+        print_info( 'Apache Uptime: ' );
         print_warning( 'Apache is not up (failed: http://localhost/whm-server-status)' );
     }    
 }
@@ -1236,7 +1244,6 @@
         '/tmp'                          => '1777',
         '/usr'                          => '755',
         '/usr/bin'                      => '755',
-        '/usr/bin/passwd'               => '4755',
         '/usr/sbin'                     => '755',
         '/usr/local/apache'             => '755',
         '/usr/local/apache/bin/httpd'   => '755',
@@ -1278,6 +1285,15 @@
         }
     }
 
+    if ( -e '/usr/bin/passwd' ) {
+        my $mode = ( stat( '/usr/bin/passwd' ))[2] & 07777;
+        $mode = sprintf "%lo", $mode;
+        if ( $mode != '4755' and $mode != '4511' ) {
+            print_warn( 'Non-default Permissions: ' );
+            print_warning( "/usr/bin/passwd (mode: $mode | default: 4755 or 6755)" );
+        }
+    }
+
     if ( -e '/sbin/ifconfig' ) {
         my $mode = ( stat( '/sbin/ifconfig' ))[2] & 07777;
         $mode = sprintf "%lo", $mode;
@@ -1417,11 +1433,16 @@
 
     my $hooks_output;
     if ( @hooks ) {
-        print_warn( 'Hooks: ' );
         for my $hook ( @hooks ) {
             $hook = '/scripts/' . $hook;
-            $hooks_output .= " $hook ";
+            if ( ! -z $hook ) {
+               $hooks_output .= " $hook ";
+            }
         }
+    }
+    
+    if ( $hooks_output ) {
+        print_warn( 'Hooks: ' );
         print_warning( $hooks_output );
     }
 }
@@ -1433,8 +1454,9 @@
         if ( -e $log ) {
             my $size = ( stat( $log ) )[7];
             if ( $size > 2_100_000_000 ) {
+                $size = sprintf("%0.2fGB", $size/1073741824);
                 print_warn( 'M-M-M-MONSTER LOG!: ' );
-                print_warning( "$log ($size bytes)" );
+                print_warning( "$log ($size)" );
             }
         }
     }    
@@ -1570,7 +1592,7 @@
         }
     }
 
-    if ( $external_ip_address ) {
+    if ( $external_ip_address =~ m{ \A \d+\.\d+\.\d+\.\d+ }xms ) {
         if ( ! grep { /$external_ip_address/ } @local_ipaddrs_list ) {
             print_warn( 'NAT: ' );
             print_warning( "external IP address $external_ip_address is not bound to server" );
@@ -1846,26 +1868,7 @@
     }
 }
 
-sub check_for_additional_rpms {
-    return if ! @rpm_list;
-
-    my @additional_rpms = grep { /^(php-|kde-|psa-|clamav|clamd|rrdtool-)|(http|apache|pear|sendmail)/ } @rpm_list;
-    if ( @additional_rpms ) {
-        @additional_rpms = sort @additional_rpms;
-        for my $additional_rpm ( @additional_rpms ) {
-            next if ( $additional_rpm =~ /sendmail-(cf|doc|devel)-|httpd-tools/ );
-            print_start( 'Additional RPM: ' );
-            print_warning( $additional_rpm );
-        }
-    }    
-}
-
-sub check_mysql_rpm_mismatch {
-    return if ! @rpm_list;
-
-    ## MySQL version mismatch check
-    my @mysql_rpm_versions;
-
+sub populate_mysql_rpm_versions_array {
     for my $rpm ( @rpm_list ) {
         if ( $rpm =~ m{ \A MySQL-server-(.*) \z }xms ) {
             push @mysql_rpm_versions, $1;
@@ -1875,7 +1878,7 @@
         }
         elsif ( $rpm =~ m{ \A MySQL-devel-(.*) \z }xms ) {
             push @mysql_rpm_versions, $1;
-        }
+        }    
         elsif ( $rpm =~ m{ \A MySQL-client-(.*) \z }xms ) {
             push @mysql_rpm_versions, $1;
         }
@@ -1886,6 +1889,40 @@
             push @mysql_rpm_versions, $1;
         }
     }    
+}
+
+sub check_for_mysql_4 {
+    my $mysql_4 = 0;
+
+    for my $rpm ( @mysql_rpm_versions ) {
+        if ( $rpm =~ m{ \A 4 }xms ) {
+            $mysql_4 = 1;
+            last;
+        }
+    }
+
+    if ( $mysql_4 == 1 ) {
+        print_warn( 'MySQL 4.x RPM: ' );
+        print_warning( 'found! This can interfere with cPanel updates' );
+    }
+}
+
+sub check_for_additional_rpms {
+    return if ! @rpm_list;
+
+    my @additional_rpms = grep { /^(php-|kde-|psa-|clamav|clamd|rrdtool-)|(http|apache|pear|sendmail)/ } @rpm_list;
+    if ( @additional_rpms ) {
+        @additional_rpms = sort @additional_rpms;
+        for my $additional_rpm ( @additional_rpms ) {
+            next if ( $additional_rpm =~ /sendmail-(cf|doc|devel)-|httpd-tools/ );
+            print_start( 'Additional RPM: ' );
+            print_warning( $additional_rpm );
+        }
+    }    
+}
+
+sub check_mysql_rpm_mismatch {
+    return if ! @rpm_list;
 
     my $first_rpm = pop @mysql_rpm_versions;
     for ( 1 .. scalar @mysql_rpm_versions ) {
@@ -2095,12 +2132,7 @@
 
 sub check_bash_history_for_certain_commands {
     my $bash_history = '/root/.bash_history';
-
-    my %shell_commands = (
-        'chattr'        => 0,
-        'chmod'         => 0,
-    );
-
+    my %history_commands = ();
     my $commands;
 
     if ( -l $bash_history ) {
@@ -2112,23 +2144,24 @@
         if ( open my $history_fh, '<', $bash_history ) {
             while ( <$history_fh> ) {
                 if ( /chattr/ ) {
-                    $shell_commands{'chattr'} = 1;
+                    $history_commands{'chattr'} = 1;
                 }
-                elsif ( /chmod/ ) {
-                    $shell_commands{'chmod'} = 1;
+                if ( /chmod/ ) {
+                    $history_commands{'chmod'} = 1;
+                }
+                if ( /openssl(?:.*)\.tar/ ) {
+                    $history_commands{'openssl*.tar'} = 1;
                 }
             }
             close $history_fh;
         }
     }
 
-    while ( my ( $key, $value ) = each ( %shell_commands ) ) {
-        if ( $value == 1 ) {
+    if ( %history_commands ) {
+        while ( my ( $key, $value ) = each ( %history_commands ) ) {
             $commands .= "[$key] ";
         }
-    }
 
-    if ( $commands ) {
         print_warn( "$bash_history commands found: " );
         print_warning( $commands );
     }
@@ -2162,10 +2195,7 @@
 
     return if ! -e $cron;
 
-    my %commands = (
-        'rm'    => 0,
-    );
-
+    my %commands = ();
     my $commands;
 
     if ( open my $cron_fh, '<', $cron ) {
@@ -2173,23 +2203,24 @@
             if ( /\srm\s/ ) {
                 $commands{'rm'} = 1;
             }
-            elsif ( /\schmod\s/ ) {
+            if ( /\schmod\s/ ) {
                 $commands{'chmod'} = 1;
             }
-            elsif ( /\schown\s/ ) {
+            if ( /\schown\s/ ) {
                 $commands{'chown'} = 1;
             }
+            if ( /\schattr/ ) {
+                $commands{'chattr'} = 1;
+            }
         }
         close $cron_fh;
     }
 
-    while ( my ( $key, $value ) = each ( %commands ) ) {
-        if ( $value == 1 ) {
+    if ( %commands ) {
+        while ( my ( $key, $value ) = each ( %commands ) ) {
             $commands .= "[$key] ";
         }
-    }
 
-    if ( $commands ) {
         print_warn( "$cron commands found: " );
         print_warning( $commands );
     }
@@ -2276,6 +2307,79 @@
     }
 }
 
+sub check_for_cpsources_conf {
+    my $cpsources_conf = '/etc/cpsources.conf';
+
+    if ( -f $cpsources_conf and ! -z $cpsources_conf ) {
+        print_warn( '/etc/cpsources.conf: ' );
+        print_warning( 'exists!' );
+    }
+}
+
+sub check_for_apache_rlimits {
+    my $httpdconf = '/usr/local/apache/conf/httpd.conf';
+    my $rlimits = 0;
+
+    if ( open my $httpdconf_fh, '<', $httpdconf ) {
+        while ( <$httpdconf_fh> ) {
+            if ( /(RLimitMEM|RLimitCPU)/i ) {
+                $rlimits = 1;
+                last;
+            }
+        }
+        close $httpdconf_fh;
+    }
+
+    if ( $rlimits == 1 ) {
+        print_warn( 'Apache RLimits: ' );
+        print_warning( 'found in httpd.conf (RLimitMEM and/or RLimitCPU)' );
+    }
+}
+
+sub check_if_crond_is_running {
+    my $crond_is_running = 0;
+
+    for my $process ( @process_list ) {
+        if ( $process =~ m{ \A root (?:.*) crond }xms ) {
+            $crond_is_running = 1;
+            last;
+        }
+    }
+
+    if ( $crond_is_running == 0 ) {
+        print_warn( 'crond: ' );
+        print_warning( 'not found in the process list!' );
+    }
+}
+
+sub check_for_usr_local_lib_libz_so {
+    if ( -f '/usr/local/lib/libz.so' ) {
+        print_warn( '/usr/local/lib/libz.so: ' );
+        print_warning( 'exists. This can prevent EA from completing' );
+    }
+}
+
+sub check_for_extra_uid_or_gid_0_user {
+    my $extra_uid_or_gid_0_users;
+
+    if ( open my $passwd_fh, '<', '/etc/passwd' ) {
+        while ( <$passwd_fh> ) {
+            if ( m{ \A ([^:]+) : x : (\d+) : }xms ) {
+                my ( $user, $uid ) = ( $1, $2 );
+                if ( $uid == 0 and $user ne 'root' ) {
+                    $extra_uid_or_gid_0_users .= "$user ";
+                }
+            }
+        }
+        close $passwd_fh;
+    }
+
+    if ( $extra_uid_or_gid_0_users ) {
+        print_warn( 'UID 0 users: ' );
+        print_warning( $extra_uid_or_gid_0_users );
+    }
+}
+
 ##############################
 #  END [WARN] CHECKS
 ##############################
